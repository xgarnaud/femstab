real nu = 1./500.;
string basedir="../data/";
string outdir=basedir;

// read the mesh
mesh Th = readmesh(basedir+"mesh0.msh");
fespace Xh(Th,P2);
fespace Mh(Th,P1);

mesh Th2 = readmesh(basedir+"mesh-2.msh");
// fespace Mh2(Th2,P1);

int  i=0;

include "../varf/rect/varf.edp"

{ 
  ifstream file(basedir+"ux0.dat");
  file >> ux0[] ;}
{ ifstream file(basedir+"uy0.dat");
  file >> uy0[] ;}

plot(ux0,fill = 1,wait = 1,cmm = "ux0");
plot(uy0,fill = 1,wait = 1,cmm = "uy0");

fespace Vh(Th,[P2,P2,P1]);         // Vector-valued function space

Vh [iu1,iu2,iu3] = [0,1,2];
Vh [u1x,u2x,u3x] = [x,x,x];
Vh [u1y,u2y,u3y] = [y,y,y];
Vh [u1b,u2b,u3b] = [ux0,uy0,p0];

real tgv = 1e30;

// Build the matrices 
cout << "Assemble matrices, m = " << endl;
matrix<complex> L;
L = LNS(Vh,Vh,tgv=tgv);
   
matrix<complex> B     = Mass(Vh,Vh,tgv=tgv);
matrix<complex> B2    = ForcingMass(Vh,Vh,tgv=tgv);
matrix<complex> Q     = Norm(Vh,Vh,tgv=tgv);

cout << "Assemble vectors "<< endl;

// Additional tools
varf bcvar([ux,uy,p],[vx,vy,q]) =  // To get the points on which dirichlet BCs are applied
  on(1,3,4,uy=1) + on(3,4,ux=1) ;

real[int] bcdir	= bcvar(0,Vh); 

// Save
cout << "Write files "<< endl;
{ofstream file(outdir+"LNS.dat");
  file << L <<endl;
}
{ofstream file(outdir+"B.dat");
  file << B <<endl;
}
{ofstream file(outdir+"B2.dat");
  file << B2 <<endl;
}
{ofstream file(outdir+"Q.dat");
  file << Q <<endl;
}

{ofstream file(outdir+"BC.dat");
  for (int j=0;j<bcdir.n; j++)
    file << bcdir[j] << endl;
}

{ofstream file(outdir+"dofs.dat");
  for (int j=0;j<iu1[].n; j++)
    file << iu1[][j] << " "<< u1x[][j] << " " << u1y[][j] << endl;
}

{ofstream file(outdir+"base.dat");
  for (int j=0;j<iu1[].n; j++)
    file << u1b[][j] << endl;
}