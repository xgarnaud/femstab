include "params.edp"

string basedir=dir+"/base/";
string outdir=dir+"/m1/";

// read the mesh
mesh Th = readmesh(basedir+"mesh0.msh");
fespace Xh(Th,P2);
fespace Mh(Th,P1);

mesh Th2 = readmesh(basedir+"mesh-2.msh");
// fespace Mh2(Th2,P1);

int  i=0;
include "../varf/axi/varf.edp"

{ 
  ifstream file(basedir+"ux0.dat");
  file >> ux0[] ;}
{ ifstream file(basedir+"ur0.dat");
  file >> ur0[] ;}

plot(ux0,fill = 1,wait = 1,cmm = "ux0");
plot(ur0,fill = 1,wait = 1,cmm = "ur0");

fespace Vh(Th,[P2,P2,P2,P1]);         // Vector-valued function space

Vh [iu1,iu2,iu3,iu4] = [0,1,2,3];
Vh [u1x,u2x,u3x,u4x] = [x,x,x,x];
Vh [u1y,u2y,u3y,u4y] = [y,y,y,y];
Vh [u1b,u2b,u3b,u4b] = [ux0,ur0,0,p0];

real tgv = 1e30;

// Build the matrices 
cout << "Assemble matrices, m = " << mt<< endl;
matrix<complex> L;

L = LNS(Vh,Vh,tgv = tgv);
   
matrix<complex> B     = Mass(Vh,Vh,tgv=tgv);
matrix<complex> B2    = ForcingMass(Vh,Vh,tgv=tgv);
matrix<complex> Q     = Norm(Vh,Vh,tgv=tgv);


cout << "Assemble vectors "<< endl;

// Additional tools
// To get the points on which dirichlet BCs are applied
real[int] bcdir(iu1[].n);

if (mt == 0){
  varf bcvar([ux,ur,ut,p],[vx,vr,vt,q]) = 
    on(1,ur=1,ut=1) + on(3,4,ut=1,ur=1,ux=1);
  bcdir	= bcvar(0,Vh); 
 }else if (abs(mt) ==1){
  varf bcvar([ux,ur,ut,p],[vx,vr,vt,q]) = 
    on(1,ux=1,p=1) + on(3,4,ut=1,ur=1,ux=1);
  bcdir	= bcvar(0,Vh); 
 }else{
  varf bcvar([ux,ur,ut,p],[vx,vr,vt,q]) =
    on(1,ux=1,ur=1,ut=1,p=1) + on(3,4,ut=1,ur=1,ux=1);
  bcdir	= bcvar(0,Vh); 
 }

// Save
cout << "Write files "<< endl;
{ofstream file(outdir+"LNS.dat");
  file << L <<endl;
}
{ofstream file(outdir+"B.dat");
  file << B <<endl;
}
{ofstream file(outdir+"B2.dat");
  file << B2 <<endl;
}
{ofstream file(outdir+"Q.dat");
  file << Q <<endl;
}

{ofstream file(outdir+"BC.dat");
  for (int j=0;j<bcdir.n; j++)
    file << bcdir[j] << endl;
}

{ofstream file(outdir+"dofs.dat");
  for (int j=0;j<iu1[].n; j++)
    file << iu1[][j] << " "<< u1x[][j] << " " << u1y[][j] << endl;
}

{ofstream file(outdir+"base.dat");
  for (int j=0;j<iu1[].n; j++)
    file << u1b[][j] << endl;
}